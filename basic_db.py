import streamlit as st
import pandas as pd
from pymongo import MongoClient
from datetime import datetime

# ----------------------
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
# ----------------------
MONGO_URI = st.secrets["MONGO_URI"]  # ‡πÄ‡∏Å‡πá‡∏ö Secret ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Streamlit Cloud Settings
DB_NAME = "your_database"

# Connect MongoDB
client = MongoClient(MONGO_URI)
db = client[DB_NAME]

# ----------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á DataFrame ‡πÄ‡∏õ‡πá‡∏ô List of Dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Zodiac Profiles
# ----------------------
def transform_zodiac_dataframe(df):
    records = []
    for _, row in df.iterrows():
        record = {
            "gender": row["‡πÄ‡∏û‡∏®"],
            "zodiac": row["‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£"],
            "characteristics": row["‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"],
            "strengths": row["‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á"],
            "weaknesses": row["‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô"],
            "advice_for_balance": row["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"],
            "charm": row["‡πÄ‡∏™‡∏ô‡πà‡∏´‡πå‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡πÉ‡∏à"],
            "zodiac_relations": row["‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏∞‡∏ó‡∏∞"],
            "summary": row["‡∏™‡∏£‡∏∏‡∏õ"]
        }
        records.append(record)
    return records

# ----------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á DataFrame ‡πÄ‡∏õ‡πá‡∏ô List of Dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Day Master Profiles
# ----------------------
def transform_daymaster_dataframe(df):
    records = []
    for _, row in df.iterrows():
        record = {
            "gender": row["‡πÄ‡∏û‡∏®"],
            "day_master": row["Day Master"],
            "characteristics": row["‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"],
            "strengths": row["‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á"],
            "weaknesses": row["‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô"],
            "advice_for_balance": row["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•"],
            "charm": row["‡πÄ‡∏™‡∏ô‡πà‡∏´‡πå‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡πÉ‡∏à"],
            "summary": row["‡∏™‡∏£‡∏∏‡∏õ"]
        }
        records.append(record)
    return records

# ----------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á DataFrame ‡πÄ‡∏õ‡πá‡∏ô List of Dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Calendar Profiles
# ----------------------
def transform_calendar_dataframe(df, month_name):
    thai_months = {
        "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°": 1,
        "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå": 2,
        "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°": 3,
        "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô": 4,
        "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°": 5,
        "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô": 6,
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°": 7,
        "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°": 8,
        "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô": 9,
        "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°": 10,
        "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô": 11,
        "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°": 12
    }

    records = []
    for col in df.columns:
        col_data = df[col].dropna().tolist()
        if len(col_data) >= 19:
            full_date_text = col_data[0].strip()
            if "‡∏ó‡∏µ‡πà" not in full_date_text:
                st.warning(f"‚ùóÔ∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {col}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏ó‡∏µ‡πà' ‡πÉ‡∏ô {full_date_text}")
                continue

            day_part, date_part = full_date_text.split("‡∏ó‡∏µ‡πà", 1)
            day_name = day_part.strip()
            date_text = date_part.strip()

            try:
                parts = date_text.replace("‡∏û.‡∏®.", "").replace(" ‡∏û.‡∏®.", "").split()
                if len(parts) != 3:
                    st.warning(f"‚ùóÔ∏è ‡∏Ç‡πâ‡∏≤‡∏° {date_text}: format ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    continue

                day = int(parts[0])
                month_thai = parts[1]
                year_thai = int(parts[2])

                month = thai_months.get(month_thai)
                if not month:
                    st.warning(f"‚ùóÔ∏è ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {month_thai}")
                    continue

                year = year_thai - 543
                date_obj = datetime(year, month, day)
            except Exception as e:
                st.warning(f"‚ùóÔ∏è Error parsing date: {date_text} : {str(e)}")
                continue

            record = {
                "date": date_obj.strftime("%Y-%m-%d"),
                "day_name": day_name,
                "theme": col_data[1],
                "power_of_day": col_data[3],
                "seasonal_effect": col_data[5],
                "highlight_of_day": col_data[7],
                "things_to_do": col_data[10],
                "things_to_avoid": col_data[12],
                "zodiac_relations": col_data[14],
                "lucky_colors": col_data[16],
                "summary": col_data[18]
            }
            records.append(record)
    return records

# ----------------------
# UI - Streamlit Layout
# ----------------------
st.title("üìÇ Upload Excel ‚ûî Update MongoDB NoSQL")

option = st.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î",
    ("‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£ (Zodiac Profiles)", "Day Master Profiles", "Calendar Profiles 2568")
)

uploaded_file = st.file_uploader("üìé Upload your Excel file:", type=["xlsx"])

if uploaded_file:
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
    xls = pd.ExcelFile(uploaded_file)
    if option == "Calendar Profiles 2568":
        month = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:", xls.sheet_names)
        df = pd.read_excel(uploaded_file, sheet_name=month)
    else:
        df = pd.read_excel(uploaded_file)

    st.subheader("üîç Preview Data:")
    st.dataframe(df)

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    if option == "‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£ (Zodiac Profiles)":
        collection = db["zodiac_profiles"]
        records = transform_zodiac_dataframe(df)
    elif option == "Day Master Profiles":
        collection = db["daymaster_profiles"]
        records = transform_daymaster_dataframe(df)
    else:
        collection = db["calendar_profiles_2568"]
        records = transform_calendar_dataframe(df, month)

    if st.button("üíæ Insert/Update Database"):
        if records:
            inserted, updated = 0, 0
            for record in records:
                if option == "‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£ (Zodiac Profiles)":
                    filter_query = {"gender": record["gender"], "zodiac": record["zodiac"]}
                elif option == "Day Master Profiles":
                    filter_query = {"gender": record["gender"], "day_master": record["day_master"]}
                else:
                    filter_query = {"date": record["date"]}
                update_data = {"$set": record}
                result = collection.update_one(filter_query, update_data, upsert=True)
                if result.matched_count > 0:
                    updated += 1
                else:
                    inserted += 1
            st.success(f"üöÄ Successfully inserted {inserted} and updated {updated} records into {collection.name}!")
        else:
            st.warning("No data to insert!")

    st.subheader("üìä Current Database Records:")
    docs = list(collection.find({}, {"_id": 0}))
    if docs:
        st.dataframe(pd.DataFrame(docs))
    else:
        st.info("üìö No records found in database.")

# ----------------------
# Tips
# ----------------------
# ‚Ä¢ ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Streamlit Cloud Settings > Secrets ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö MONGO_URI ‡πÄ‡∏ä‡πà‡∏ô
# ‚Ä¢ ‡∏õ‡∏£‡∏±‡∏ö df.columns ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
# ‚Ä¢ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Bulk Insert/Update
# ‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Dashboard ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Collection
