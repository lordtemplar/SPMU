import streamlit as st
from pymongo import MongoClient
import datetime
import pandas as pd

# ------------------------------
# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏î‡πâ‡∏ß‡∏¢ Secret
# ------------------------------
MONGO_URI = st.secrets["MONGO_URI"]
DATABASE_NAME = st.secrets["DATABASE_NAME"]

client = MongoClient(MONGO_URI)
db = client[DATABASE_NAME]

# ------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Collection
# ------------------------------
@st.cache_data
def load_profiles(collection_name):
    collection = db[collection_name]
    return list(collection.find({}))

def find_profile(profiles, field, keyword):
    for profile in profiles:
        if keyword == str(profile.get(field, "")):
            return profile
    return None

def format_mongo_date(date_obj):
    return f"{date_obj.year}-{date_obj.month:02d}-{date_obj.day:02d}"

# ------------------------------
# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Streamlit
# ------------------------------
st.set_page_config(page_title="Profiles Explorer", page_icon="üåü")
st.title("üåü ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profiles üåü")

# ------------------------------
# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ------------------------------
search_type = st.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
    (
        "Day Master (‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß)",
        "Zodiac Profile (‡∏ô‡∏±‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå)",
        "Calendar Profile (‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô)",
        "AI Prompt"
    )
)

collection_map = {
    "Day Master (‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß)": "daymaster_profiles",
    "Zodiac Profile (‡∏ô‡∏±‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå)": "zodiac_profiles",
    "Calendar Profile (‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô)": "calendar_profiles_2568",
    "AI Prompt": "ai_prompts"
}

field_map = {
    "Day Master (‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß)": "day_master",
    "Zodiac Profile (‡∏ô‡∏±‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå)": "zodiac",
    "Calendar Profile (‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô)": "date"
}

selected_collection = collection_map[search_type]
search_field = field_map.get(search_type, None)
profiles = load_profiles(selected_collection)

# ------------------------------
# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
# ------------------------------
if search_type in ("Day Master (‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß)", "Zodiac Profile (‡∏ô‡∏±‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå)"):
    options = sorted({p.get(search_field, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏") for p in profiles})
    selected_option = st.selectbox(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {search_type}", options)

    if selected_option:
        profile = find_profile(profiles, search_field, selected_option)

        if profile:
            st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö {selected_option}")

            if search_type == "Day Master (‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß)":
                st.subheader(f"‡∏ò‡∏≤‡∏ï‡∏∏: {profile.get('day_master', '-')}")
                st.markdown(f"**‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:** {profile.get('characteristics', '-')}")
                st.markdown("**‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á:**")
                for item in profile.get('strengths', []):
                    st.write(f"- {item}")
                st.markdown("**‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô:**")
                for item in profile.get('weaknesses', []):
                    st.write(f"- {item}")
                st.markdown("**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï:**")
                for item in profile.get('advice_for_balance', []):
                    st.write(f"- {item}")
                st.markdown(f"**‡πÄ‡∏™‡∏ô‡πà‡∏´‡πå:** {profile.get('charm', '-')}")

            elif search_type == "Zodiac Profile (‡∏ô‡∏±‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå)":
                st.subheader(f"‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£: {profile.get('zodiac', '-')}")
                st.markdown(f"**‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:** {profile.get('characteristics', '-')}")
                st.markdown("**‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á:**")
                for item in profile.get('strengths', []):
                    st.write(f"- {item}")
                st.markdown("**‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô:**")
                for item in profile.get('weaknesses', []):
                    st.write(f"- {item}")
                st.markdown("**‡πÄ‡∏™‡∏ô‡πà‡∏´‡πå:**")
                st.write(profile.get('charm', '-'))
                st.markdown("**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏î‡∏∏‡∏•:**")
                for item in profile.get('advice_for_balance', []):
                    st.write(f"- {item}")
                st.markdown("**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£‡∏≠‡∏∑‡πà‡∏ô:**")
                for item in profile.get('zodiac_relations', []):
                    st.write(f"- {item}")

elif search_type == "Calendar Profile (‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô)":
    today = datetime.date.today()
    default_date = today if datetime.date(2025, 1, 1) <= today <= datetime.date(2025, 12, 31) else datetime.date(2025, 1, 1)

    selected_date = st.date_input(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ",
        value=default_date,
        min_value=datetime.date(2025, 1, 1),
        max_value=datetime.date(2025, 12, 31)
    )

    formatted_date = format_mongo_date(selected_date)
    profile = find_profile(profiles, "date", formatted_date)

    st.info(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {formatted_date}")

    if profile:
        st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formatted_date}")

        st.subheader(f"‡∏ò‡∏µ‡∏°‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô: {profile.get('theme', '-')}")
        st.markdown(f"**‡∏Ñ‡∏≥‡∏Ñ‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô:** {profile.get('day_quote', '-')}")
        st.markdown(f"**‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô:** {profile.get('highlight_of_day', '-')}")
        st.markdown(f"**‡∏û‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô:** {profile.get('power_of_day', '-')}")
        st.markdown(f"**‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•:** {profile.get('seasonal_effect', '-')}")
        st.markdown("**‡∏™‡∏µ‡∏°‡∏á‡∏Ñ‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á:**")
        for item in profile.get('lucky_colors', []):
            st.write(f"- {item}")
        st.markdown("**‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥:**")
        for item in profile.get('things_to_do', []):
            st.write(f"- {item}")
        st.markdown("**‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á:**")
        for item in profile.get('things_to_avoid', []):
            st.write(f"- {item}")
        st.markdown("**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£:**")
        for item in profile.get('zodiac_relations', []):
            st.write(f"- {item}")
    else:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formatted_date}")

elif search_type == "AI Prompt":
    st.info("üìò ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ AI Prompt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")

    if profiles:
        topic_map = {p.get("topic", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠"): p for p in profiles}
        topic_names = sorted(topic_map.keys())
        selected_topic = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ AI Prompt", topic_names)

        if selected_topic:
            prompt = topic_map[selected_topic]
            st.subheader(f"üß† ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {prompt.get('topic', '-')}")
            st.markdown(f"**‡∏•‡∏≥‡∏î‡∏±‡∏ö:** {prompt.get('order', '-')}")
            st.markdown(f"**API1:** `{prompt.get('api1', '-')}`")
            st.markdown(f"**API2:** `{prompt.get('api2', '-')}`")
            st.markdown("**Prompt:**")
            st.markdown(prompt.get("prompt", "-").strip(), unsafe_allow_html=True)
    else:
        st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI Prompt")

