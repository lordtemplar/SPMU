# streamlit_app.py

import streamlit as st
from pymongo import MongoClient

# ------------------------------
# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏î‡πâ‡∏ß‡∏¢ Secret
# ------------------------------
MONGO_URI = st.secrets["MONGO_URI"]
DATABASE_NAME = st.secrets["DATABASE_NAME"]
COLLECTION_NAME = st.secrets["COLLECTION_NAME"]

client = MongoClient(MONGO_URI)
db = client[DATABASE_NAME]
collection = db[COLLECTION_NAME]

# ------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
# ------------------------------
@st.cache_data
def load_all_profiles():
    profiles = list(collection.find({}))
    return profiles

# ------------------------------
# ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏≤‡∏ï‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
# ------------------------------
def get_day_masters(profiles):
    return [profile["day_master"] for profile in profiles]

# ------------------------------
# ‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏≤‡∏ï‡∏∏
# ------------------------------
def find_profile_by_day_master(profiles, day_master):
    for profile in profiles:
        if profile["day_master"] == day_master:
            return profile
    return None

# ------------------------------
# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Streamlit
# ------------------------------
st.set_page_config(page_title="Day Master Profiles", page_icon="üåü")

st.title("üåü ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß (Day Master) üåü")

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
profiles = load_all_profiles()
day_masters = get_day_masters(profiles)

# Selectbox ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏≤‡∏ï‡∏∏
selected_day_master = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏≤‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", day_masters)

# ‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
profile = find_profile_by_day_master(profiles, selected_day_master)

if profile:
    st.subheader(f"‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß: {profile['day_master']}")
    st.markdown(f"**‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:** {profile['characteristics']}")
    
    st.markdown("**‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á:**")
    for strength in profile.get('strengths', []):
        st.write(f"- {strength}")
    
    st.markdown("**‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô:**")
    for weakness in profile.get('weaknesses', []):
        st.write(f"- {weakness}")
    
    st.markdown("**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï:**")
    for advice in profile.get('advice_for_balance', []):
        st.write(f"- {advice}")

    st.markdown(f"**‡πÄ‡∏™‡∏ô‡πà‡∏´‡πå‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡πÉ‡∏à:** {profile['charm']}")
    
    st.success("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
else:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ò‡∏≤‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

