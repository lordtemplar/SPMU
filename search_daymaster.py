import streamlit as st
from pymongo import MongoClient
import datetime

# ------------------------------
# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏î‡πâ‡∏ß‡∏¢ Secret
# ------------------------------
MONGO_URI = st.secrets["MONGO_URI"]
DATABASE_NAME = st.secrets["DATABASE_NAME"]

client = MongoClient(MONGO_URI)
db = client[DATABASE_NAME]

# ------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Collection
# ------------------------------
@st.cache_data
def load_profiles(collection_name):
    collection = db[collection_name]
    profiles = list(collection.find({}))
    return profiles

# ------------------------------
# ‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
# ------------------------------
def find_profile(profiles, field, keyword):
    for profile in profiles:
        if keyword == str(profile.get(field, "")):
            return profile
    return None

# ------------------------------
# ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö text ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ------------------------------
def format_thai_date(date_obj):
    thai_months = [
        "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    ]
    day = date_obj.day
    month = thai_months[date_obj.month - 1]
    year = date_obj.year
    return f"{year}-{date_obj.month:02d}-{date_obj.day:02d}"

# ------------------------------
# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Streamlit
# ------------------------------
st.set_page_config(page_title="Profiles Explorer", page_icon="üåü")

st.title("üåü ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profiles üåü")

# ------------------------------
# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
# ------------------------------
search_type = st.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
    ("Day Master (‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß)", "Zodiac Profile (‡∏ô‡∏±‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå)", "Calendar Profile (‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô)")
)

# Mapping
collection_map = {
    "Day Master (‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß)": "daymaster_profiles",
    "Zodiac Profile (‡∏ô‡∏±‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå)": "zodiac_profiles",
    "Calendar Profile (‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô)": "calendar_profiles_2568"
}

field_map = {
    "Day Master (‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß)": "day_master",
    "Zodiac Profile (‡∏ô‡∏±‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå)": "zodiac",
    "Calendar Profile (‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô)": "date"
}

selected_collection = collection_map[search_type]
search_field = field_map[search_type]

# ------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ------------------------------
profiles = load_profiles(selected_collection)

# ------------------------------
# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÅ‡∏•‡∏∞ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ------------------------------
if search_type in ("Day Master (‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß)", "Zodiac Profile (‡∏ô‡∏±‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå)"):
    # Dropdown ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    options = sorted({profile.get(search_field, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏") for profile in profiles})
    selected_option = st.selectbox(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {search_type}", options)

    if selected_option:
        profile = find_profile(profiles, search_field, selected_option)

        if profile:
            st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö {selected_option}")

            if search_type == "Day Master (‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß)":
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Day Master
                st.subheader(f"‡∏ò‡∏≤‡∏ï‡∏∏: {profile.get('day_master', '-')}")
                st.markdown(f"**‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:** {profile.get('characteristics', '-')}")
                st.markdown("**‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á:**")
                for strength in profile.get('strengths', []):
                    st.write(f"- {strength}")
                st.markdown("**‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô:**")
                for weakness in profile.get('weaknesses', []):
                    st.write(f"- {weakness}")
                st.markdown("**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï:**")
                for advice in profile.get('advice_for_balance', []):
                    st.write(f"- {advice}")
                st.markdown(f"**‡πÄ‡∏™‡∏ô‡πà‡∏´‡πå‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡πÉ‡∏à:** {profile.get('charm', '-')}")

            elif search_type == "Zodiac Profile (‡∏ô‡∏±‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå)":
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Zodiac
                st.subheader(f"‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£: {profile.get('zodiac', '-')}")
                st.markdown(f"**‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:** {profile.get('characteristics', '-')}")
                st.markdown("**‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á:**")
                for strength in profile.get('strengths', []):
                    st.write(f"- {strength}")
                st.markdown("**‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô:**")
                for weakness in profile.get('weaknesses', []):
                    st.write(f"- {weakness}")
                st.markdown("**‡πÄ‡∏™‡∏ô‡πà‡∏´‡πå:**")
                st.write(profile.get('charm', '-'))
                st.markdown("**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•:**")
                for advice in profile.get('advice_for_balance', []):
                    st.write(f"- {advice}")
                st.markdown("**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£‡∏≠‡∏∑‡πà‡∏ô:**")
                for relation in profile.get('zodiac_relations', []):
                    st.write(f"- {relation}")

        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

elif search_type == "Calendar Profile (‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô)":
    # ‡πÉ‡∏ä‡πâ Date Picker
    selected_date = st.date_input(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ",
        value=datetime.date(2025, 1, 1),
        min_value=datetime.date(2025, 1, 1),
        max_value=datetime.date(2025, 12, 31)
    )

    formatted_date = format_thai_date(selected_date)

    st.info(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {formatted_date}")

    profile = find_profile(profiles, search_field, formatted_date)

    if profile:
        st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formatted_date}")

        st.subheader(f"‡∏ò‡∏µ‡∏°‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô: {profile.get('theme', '-')}")
        st.markdown(f"**‡∏Ñ‡∏≥‡∏Ñ‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô:** {profile.get('day_quote', '-')}")
        st.markdown(f"**‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô:** {profile.get('highlight_of_day', '-')}")
        st.markdown(f"**‡∏û‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô:** {profile.get('power_of_day', '-')}")
        st.markdown(f"**‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•:** {profile.get('seasonal_effect', '-')}")
        st.markdown("**‡∏™‡∏µ‡∏°‡∏á‡∏Ñ‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á:**")
        for color in profile.get('lucky_colors', []):
            st.write(f"- {color}")
        st.markdown("**‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥:**")
        for todo in profile.get('things_to_do', []):
            st.write(f"- {todo}")
        st.markdown("**‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á:**")
        for avoid in profile.get('things_to_avoid', []):
            st.write(f"- {avoid}")
        st.markdown("**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£:**")
        for relation in profile.get('zodiac_relations', []):
            st.write(f"- {relation}")

    else:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formatted_date}")
